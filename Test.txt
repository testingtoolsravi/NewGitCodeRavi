public class Login extends BasePage {

	@FindBy(xpath = "//input[@name='loginField']")
	private WebElement txt_UserName;

	@FindBy(xpath = "//input[@name='passwordField']")
	private WebElement txt_Password;

	@FindBy(xpath = "//span[text()='Submit']")
	private WebElement btn_Login;

	@FindBy(xpath = "//div[contains(@class,'logout-button') and @role=\"button\"]")
	private WebElement btn_LogOut;

	public Login() {
		PageFactory.initElements(driver, this);
	}

	public Login openEbank() {
		try {
			String URL = TestBase.prop.eBankIntURL();
			webActions.loadURL(URL);
		} catch (Exception e) {
			report.reportHardFail(e, "Failed to Open EBank URL");
		}
		return (Login) base(Login.class);
	}

	public HomePage login(String userName, String password) {
		try {

			webActions.waitUntilPresentAndDisplayed(txt_UserName, "UserName");

			webActions.sendKeys(txt_UserName, userName, "UserName");
			webActions.sendKeys(txt_Password, password, "Password");
			webActions.clickBYJS(btn_Login, "Login button");
			report.reportPass("Login Success");
		} catch (Exception e) {
			report.reportHardFail(e, "Login With Valid Credentials");
		}
		return (HomePage) base(HomePage.class);
	}

	public HomePage loginAsAdmin() {
		try {
			String URL = TestBase.prop.eBankIntURL();
			webActions.loadURL(URL);
			String adminUser = TestBase.prop.eBankAdminUser();
			String adminPassword = TestBase.prop.eBankAdminPassword();
			base(Login.class);
			webActions.waitUntilPresentAndDisplayed(txt_UserName, "UserName");
			webActions.sendKeys(txt_UserName, adminUser, "UserName");
			webActions.sendKeys(txt_Password, adminPassword, "Password");
			webActions.clickBYJS(btn_Login, "Login button");
			report.reportPass("Login Success as Admin");
		} catch (Exception e) {
			report.reportHardFail(e, "Login Failure as Admin");
		}
		return (HomePage) base(HomePage.class);
	}

	public void logOut() {
		try {
			webActions.clickBYJS(btn_LogOut, "Logout");
			webActions.waitUntilPresentAndDisplayed(btn_Login, "Login Button");
			report.reportPass("Logout Success");
		} catch (Exception e) {
			report.reportHardFail(e, "Logout Success");
		}
	}

	@Override
	protected ExpectedCondition getPageLoadCondition() {
		return ExpectedConditions.visibilityOf(txt_UserName);
	}

}
