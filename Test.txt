package com.tab.af.reporting;

import java.util.HashMap;
import java.util.Map;

import com.aventstack.extentreports.AnalysisStrategy;
import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.reporter.ExtentHtmlReporter;
import com.aventstack.extentreports.reporter.configuration.Theme;

public class ExtentManager {

	private static Map<Long, ExtentReports> extentMap = new HashMap<Long, ExtentReports>();

	public static ExtentHtmlReporter getReporter(String fullName, String scenarioName) {
		ExtentHtmlReporter htmlReporter = new ExtentHtmlReporter(fullName);

		htmlReporter.setAppendExisting(true);
		htmlReporter.config().setDocumentTitle(scenarioName);
		htmlReporter.config().setTheme(Theme.DARK);
		return htmlReporter;
	}

	public static void setupInstance(String scenarioName) {
		String fullPath = System.getProperty("extent.Report.Directory") + "\\" + scenarioName + ".html";
		ExtentReports extent = new ExtentReports();
		extent.attachReporter(getReporter(fullPath, scenarioName));
		extent.setSystemInfo("Run Platform", "Winodws");
		extent.setSystemInfo("Environment", "QA");
		extent.setAnalysisStrategy(AnalysisStrategy.TEST);
		extentMap.put(Thread.currentThread().getId(), extent);
	}

	public static ExtentReports getInstance() {
		return extentMap.get(Thread.currentThread().getId());
	}

	public static void flushInstance() {
		getInstance().flush();
	}
}
******************************************************************************
package com.tab.af.reporting;

import java.io.File;
import java.util.List;
import java.util.Map;

import org.testng.IReporter;
import org.testng.IResultMap;
import org.testng.ISuite;
import org.testng.ISuiteResult;
import org.testng.ITestContext;
import org.testng.ITestResult;
import org.testng.xml.XmlSuite;

import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.Status;
import com.aventstack.extentreports.reporter.ExtentHtmlReporter;
import com.aventstack.extentreports.reporter.configuration.Theme;

public class ExtentNG implements IReporter {
	private ExtentReports extent;

	@Override
	public void generateReport(List<XmlSuite> xmlSuites, List<ISuite> suites, String outputDirectory) {
		extent = new ExtentReports();
		ExtentHtmlReporter reporter = new ExtentHtmlReporter(
				outputDirectory + File.separator + "ExtentReportsTestNG.html");
		reporter.setAppendExisting(false);
		reporter.config().setTheme(Theme.DARK);
		extent.attachReporter(reporter);

		for (ISuite suite : suites) {
			Map<String, ISuiteResult> result = suite.getResults();

			for (ISuiteResult r : result.values()) {
				ITestContext context = r.getTestContext();

				buildTestNodes(context.getPassedTests(), Status.PASS);
				buildTestNodes(context.getFailedTests(), Status.FAIL);
				buildTestNodes(context.getSkippedTests(), Status.SKIP);
			}
		}

		extent.flush();

	}

	private void buildTestNodes(IResultMap tests, Status status) {
		ExtentTest test;

		if (tests.size() > 0) {
			for (ITestResult result : tests.getAllResults()) {
				Object[] aa = result.getParameters();

				test = extent.createTest(aa[0].toString());

				test.assignCategory(aa[1].toString());

				String message = "Test " + status.toString().toLowerCase() + "ed";

				if (result.getThrowable() != null) {
					message = result.getThrowable().getMessage();
				}

				test.log(status, message);

			}
		}
	}

}
***************************************************************************
package com.tab.af.reporting;

import java.util.HashMap;
import java.util.Map;

import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.Status;
import com.aventstack.extentreports.reporter.ExtentHtmlReporter;
import com.aventstack.extentreports.reporter.configuration.Theme;

public class ExtentSummary {

	private static ExtentReports reports;

	private static Map<Long, ExtentTest> summaryTestMap = new HashMap<Long, ExtentTest>();

	public static void createSummaryInstance() {
		String reportDirectory = System.getProperty("extent.Report.Directory");
		ExtentHtmlReporter reporter = new ExtentHtmlReporter(reportDirectory + "\\Summary.html");
		reporter.config().setReportName("Execution Summary Report");
		reporter.config().setTheme(Theme.DARK);
		reporter.config().setDocumentTitle("Automation Execution Summary Report");
		reporter.setAppendExisting(true);
		reports = new ExtentReports();
		reports.attachReporter(reporter);
	}

	public static ExtentReports getSummaryInstance() {
		return reports;
	}

	public static void createTest(String reportFileName, String category) {
		String testCaseName = reportFileName.replace(".html", "");
		ExtentTest test = reports.createTest(testCaseName).assignCategory(category);
		summaryTestMap.put(Thread.currentThread().getId(), test);
	}

	public static ExtentTest getTest() {
		return summaryTestMap.get(Thread.currentThread().getId());
	}

	public static void logFailTest(String name) {
		ExtentTest test = getTest();
		String testCaseName = name;
		String reportFileName = name + ".html";
		test.log(Status.FAIL, "<a href='" + reportFileName
				+ "' target=\"_blank\" style=\"text - decoration: underline; \" class=\"label white-text red\" >"
				+ testCaseName + "</a>");
	}

	public static void logPassTest(String name) {
		ExtentTest test = getTest();
		String testCaseName = name;
		String reportFileName = name + ".html";
		test.log(Status.PASS, "<a href='" + reportFileName
				+ "' target=\"_blank\" style=\"text - decoration: underline; \" class=\"label white-text green\" >"
				+ testCaseName + "</a>");
	}

	public static void flushSummaryReport() {
		if (reports != null) {
			reports.flush();
			summaryTestMap.remove(Thread.currentThread().getId());
		}
	}

}
*******************************************************************
package com.tab.af.reporting;

import java.util.HashMap;
import java.util.Map;

import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;

public class ExtentTestManager {

	private static Map<Long, ExtentTest> extentTestMap = new HashMap<Long, ExtentTest>();

	public static void removeTest() {
		extentTestMap.get(Thread.currentThread().getId());
	}

	public static void createTest(String testName) {
		ExtentReports extent = ExtentManager.getInstance();
		ExtentTest test = extent.createTest(testName);
		extentTestMap.put(Thread.currentThread().getId(), test);
	}

	public static ExtentTest getTest() {
		return extentTestMap.get(Thread.currentThread().getId());
	}

	public static void assignCategory(String categoryName) {
		ExtentTest test = extentTestMap.get(Thread.currentThread().getId());
		test.assignCategory(categoryName);
	}

}
*************************************************************************
package com.tab.af.reporting;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.rajatthareja.reportbuilder.ReportBuilder;
import com.tab.af.testbase.TestBase;

import net.masterthought.cucumber.Configuration;
import net.masterthought.cucumber.presentation.PresentationMode;
import net.masterthought.cucumber.reducers.ReducingMethod;
import net.masterthought.cucumber.sorting.SortingMethod;

public class JSONReportBuilder {

	private static JSONReportBuilder executionSummaryReport;
	private static final String JSONFILEPAATH = "target/cucumber-reports/cucumber.json";

	private JSONReportBuilder() {
	}

	public static JSONReportBuilder getInstance() {
		if (executionSummaryReport == null) {
			executionSummaryReport = new JSONReportBuilder();
		}
		return executionSummaryReport;
	}

	public void generateMasterThoughtsSummary() {
		List<String> list = new ArrayList();
		list.add(JSONFILEPAATH);
		String projectName = "Tab Bank";
		File reportOutputDirectory = new File("target");
		Configuration configuration = new Configuration(reportOutputDirectory, projectName);
		configuration.addPresentationModes(PresentationMode.EXPAND_ALL_STEPS);
		configuration.addClassifications("Execution Type", TestBase.prop.runType());
		configuration.addReducingMethod(ReducingMethod.HIDE_EMPTY_HOOKS);
		configuration.addPresentationModes(PresentationMode.EXPAND_ALL_STEPS);
		configuration.setSortingMethod(SortingMethod.NATURAL);
		configuration.addClassifications("Environment", TestBase.prop.onboardingEnvironment());
		// List<String> confFiles = new ArrayList<String>();
		// confFiles.add(RootDir + "\\src\\main\\resources\\Config.properties");
		// configuration.addClassificationFiles(confFiles);
		net.masterthought.cucumber.ReportBuilder reportBuilder = new net.masterthought.cucumber.ReportBuilder(list,
				configuration);
		reportBuilder.generateReports();
	}

	public void generateReportBuilderSummary() {
		String path = System.getProperty("user.dir");
		ReportBuilder reportBuilder = new ReportBuilder();
		reportBuilder.setReportDirectory(path + "\\target\\SummaryReports\\");
		// Map<String, String> map = new HashMap<String, String>();
		// for (String key : TestBase.props.stringPropertyNames()) {
		// String value = TestBase.props.getProperty(key);
		// map.put(key, value.toString());
		// }
		// reportBuilder.setAdditionalInfo(map);
		reportBuilder.setReportFileName("Summary Report");
		reportBuilder.setReportTitle("Automation Execution Report");
		reportBuilder.disableVoiceControl();
		reportBuilder.setAdditionalInfo("Author", "Abhay");
		reportBuilder.setReportColor("#b0bec5 blue-grey lighten-5");
		reportBuilder.setAdditionalInfo("Environment", TestBase.prop.onboardingEnvironment());
		List<Object> cucumberJsonReports = new ArrayList<>();
		cucumberJsonReports.add(new File(path + "\\target\\cucumber-reports\\cucumber.json"));
		String newContent = "";
		reportBuilder.build(cucumberJsonReports);
		FileReader fr = null;
		try {
			File file = new File(path + "\\target\\SummaryReports\\Summary Report.html");
			fr = new FileReader(file);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		try (BufferedReader br = new BufferedReader(fr)) {
			StringBuilder content = new StringBuilder(1024);
			while ((newContent = br.readLine()) != null) {
				content.append(newContent);
			}
			// Removing Footer
			newContent = content.toString().replace(
					"<div class=\"container\">            Happy Reporting!            <a class=\"white-text text-lighten-4 right\" href=\"http://reportbuilderjava.rajatthareja.com\">Generated by Report Builder</a>        </div>",
					"").replace("teal lighten-2", "teal lighten-5");
		} catch (IOException e) {
			e.printStackTrace();
		}
		try (FileWriter fw = new FileWriter(path + "\\target\\SummaryReports\\Summary Report.html");) {
			fw.write(newContent);
			fw.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		new JSONReportBuilder().generateReportBuilderSummary();
	}

}
**********************************************
package com.tab.af.reporting;

import java.io.File;
import java.io.IOException;
import java.util.Base64;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.testng.Assert;

import com.aventstack.extentreports.MediaEntityBuilder;
import com.aventstack.extentreports.Status;
import com.tab.af.engine.ConcurrentEngine;
import com.tab.af.engine.DriverEngine;
import com.tab.af.testbase.TestBase;

public class ReportLibrary {

	private DriverEngine engine;

	private boolean takeScreenshotPassFlag = Boolean.parseBoolean(TestBase.prop.screenshotPassedStep());

	private boolean takeScreenshotFailFlag = Boolean.parseBoolean(TestBase.prop.screenshotFailedStep());

	public DriverEngine getEngine() {
		return engine;
	}

	public ReportLibrary(DriverEngine engine) {
		this.engine = engine;
	}

	public ReportLibrary() {

	}

	public void reportInfo(String message) {
		ExtentTestManager.getTest().log(Status.INFO, message);
	}

	public void logPass(String message) {
		ExtentTestManager.getTest().log(Status.PASS, message);
	}

	public void logException(Throwable t) {
		ExtentTestManager.getTest().log(Status.FAIL, t);
	}

	public void logHardFail(String message, Throwable e) {
		ExtentTestManager.getTest().log(Status.FAIL, message + " Exception Message: " + e.getMessage());
		Assert.assertTrue(false);
	}

	public void logFail(String message, Throwable e) {
		ExtentTestManager.getTest().log(Status.FAIL, message + " Exception Message: " + e.getMessage());

	}

	public void logWarning(String message) {
		ExtentTestManager.getTest().log(Status.WARNING, message);

	}

	public void reportPass(String message) {
		if (takeScreenshotPassFlag) {
			passedLogWithScreenshot(message);
		} else {
			ExtentTestManager.getTest().log(Status.PASS, message);
		}
	}

	public void reportPass(String message, boolean takeScreenshot) {
		if (takeScreenshotPassFlag && takeScreenshot) {
			passedLogWithScreenshot(message);
		} else {
			ExtentTestManager.getTest().log(Status.PASS, message);
		}
	}

	public void reportFail(String message) {
		if (takeScreenshotFailFlag) {
			failedLogWithScreenshot(message);
		} else {
			ExtentTestManager.getTest().log(Status.FAIL, message);
		}
	}

	public void reportFail(String message, boolean takeScreenshot) {
		if (takeScreenshotFailFlag && takeScreenshot) {
			failedLogWithScreenshot(message);
		} else {
			ExtentTestManager.getTest().log(Status.FAIL, message);
		}
	}

	public void reportHardFail(Exception e, String message) {
		if (takeScreenshotFailFlag) {
			failedLogWithScreenshot(message + e.getMessage());
			Assert.fail();
		} else {
			ExtentTestManager.getTest().log(Status.FAIL, message);
			Assert.fail();
		}
	}

	public void reportHardFail(String message, boolean takeScreenshot) {
		if (takeScreenshotFailFlag && takeScreenshot) {
			failedLogWithScreenshot(message);
			Assert.fail();
		} else {
			ExtentTestManager.getTest().log(Status.FAIL, message);
			Assert.fail();
		}
	}

	public void reportHardFail(String message) {

		ExtentTestManager.getTest().log(Status.FAIL, message);
		Assert.fail();

	}

	public void reportHardFailException(Throwable t) {

		ExtentTestManager.getTest().log(Status.FAIL, t);
		Assert.fail();

	}

	private void failedLogWithScreenshot(String message) {

		String base64String = captureBase64();
		try {
			ExtentTestManager.getTest().log(Status.FAIL, message,
					MediaEntityBuilder.createScreenCaptureFromBase64String(base64String).build());
		} catch (IOException e) {
			System.out.println(
					"failedLogWithScreenshot > Screenshot could not be captured. Possible causes are directory not found or access to it.");
			e.printStackTrace();
		}
	}

	private void passedLogWithScreenshot(String message) {
		String base64String = captureBase64();
		try {
			ExtentTestManager.getTest().log(Status.PASS, message,
					MediaEntityBuilder.createScreenCaptureFromBase64String(base64String).build());
		} catch (IOException e) {
			System.out.println(
					"passedLogWithScreenshot Screenshot could not be captured. Possible causes are directory not found or access to it.");
			e.printStackTrace();
		}
	}

	public String captureBase64() {
		File source = takeScreenShot();
		String base64Screenshot = "";
		try {
			byte[] fileContent = FileUtils.readFileToByteArray(source);
			base64Screenshot = Base64.getEncoder().encodeToString(fileContent);
		} catch (IOException io) {
			System.out.println("Screenshot file not found or inaccessible.");
			io.printStackTrace();
		}
		return base64Screenshot;
	}

	public File takeScreenShot() {
		File srcFile = null;
		if (ConcurrentEngine.getEngine() != null) {
			if (ConcurrentEngine.getEngine().getWebDriver() != null) {
				try {
					srcFile = ((TakesScreenshot) ConcurrentEngine.getEngine().getWebDriver())
							.getScreenshotAs(OutputType.FILE);
				} catch (Exception e) {
					System.out.println("Could not capture screenshot" + e);
				}
			}
		}
		return srcFile;
	}

}
***************************************************************
package com.tab.af.reporting;

import org.apache.log4j.Level;
import org.apache.log4j.Logger;

public class StepLogging {

	private Logger log = Logger.getLogger(StepLogging.class);

	private static StepLogging stepLogging;

	private StepLogging() {
		// Singleton
	}

	public static StepLogging getLoggingObject() {
		if (stepLogging == null) {
			stepLogging = new StepLogging();
		}
		return stepLogging;
	}

	public void setLogginLevel(String loggingLevel) {
		log.setLevel(Level.toLevel(loggingLevel));

	}

	public void info(String details, String elementName)

	{
		log.info("Thread: " + Thread.currentThread().getName() + details + elementName);
	}

	public void info(String details)

	{
		log.info("Thread: " + Thread.currentThread().getName() + details);
	}

	public void warn(String details, String elementName) {

		log.warn("Thread: " + Thread.currentThread().getName() + details + elementName);

	}

	public void warn(String message) {

		log.warn("Thread: " + Thread.currentThread().getName() + "message");

	}

	public void error(String details, String elementName, Throwable e) {

		log.error("Thread: " + Thread.currentThread().getName() + details + elementName, e);

	}

	public void error(String message, Throwable e) {

		log.error("Thread: " + Thread.currentThread().getName() + message, e);

	}

	public void fatal(String details, String elementName, Throwable e) {

		log.fatal("Thread: " + Thread.currentThread().getName() + details + elementName, e);

	}

}
