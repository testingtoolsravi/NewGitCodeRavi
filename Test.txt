@AddKYCDocument @OBP
Feature: OpenBanking

  Background: 
    Given Setup Base URI for the "PUT" Request
    And Setup Request Endpoint for "AddKYCDocument"
      | basepath  | add.kyc.document |                                  |
      | pathparam | BANK_ID          | add.kyc.document.BANK_ID         |
      | pathparam | CUSTOMER_ID      | add.kyc.document.CUSTOMER_ID     |
      | pathparam | KYC_DOCUMENT_ID  | add.kyc.document.KYC_DOCUMENT_ID |
    And Users adds the Headers Parameters for "AddKYCDocumentHeader"
    And user adds the Request body from "AddKYCDocument"
    And Load Test Data File "AddKYCDocument"

  @TC_0001    @addKYCDemo
  Scenario Outline: TC_0001_Add KYC Document Valid Data
    Given User Loads data for Test Case "TC_0001" and test data "<data>"
    And User sends a "put" Request
    Then Status code and Line of Response should match "Status Code" and "Status Line"
    And The Schema of Response JSON should match the Expected Schema from "AddKYCDocumentSchema"
    And The Response body should contain same "$.documents[0].bank_id" as the path Param "BANK_ID"
    And The Response body should contain same "$.documents[0].customer_id" as the path Param "CUSTOMER_ID"

    Examples: 
      | data      |
      | testdata1 |

  @TC_0002
  Scenario Outline: TC_0002_Add KYC Document Invalid CUSTOMER_ID param
    Given User Loads data for Test Case "TC_0002" and test data "<data>"
    When User changes the path param "CUSTOMER_ID"
    And User sends a "put" Request
    Then Status code and Line of Response should match "Status Code" and "Status Line"

    Examples: 
      | data      |
      | testdata1 |
      | testdata2 |
      | testdata3 |

  @TC_0003
  Scenario Outline: TC_0003_Add KYC Document Invalid BANK_ID param
    Given User Loads data for Test Case "TC_0003" and test data "<data>"
    When User changes the path param "BANK_ID"
    And User sends a "put" Request
    Then Status code and Line of Response should match "Status Code" and "Status Line"

    Examples: 
      | data      |
      | testdata1 |
      | testdata2 |
      | testdata3 |

  @TC_0004
  Scenario Outline: TC_0004_Add KYC Document Invalid BANK_ID param
    Given User Loads data for Test Case "TC_0004" and test data "<data>"
    When User changes the path param "KYC_DOCUMENT_ID"
    And User sends a "put" Request
    Then Status code and Line of Response should match "Status Code" and "Status Line"

    Examples: 
      | data      |
      | testdata1 |
      | testdata2 |
      | testdata3 |

  @TC_0005
  Scenario Outline: TC_0005_Add KYC Document Invalid client_id Header
    Given User Loads data for Test Case "TC_0005" and test data "<data>"
    When user changes the "client_id" header
    And User sends a "put" Request
    Then Status code and Line of Response should match "Status Code" and "Status Line"

    Examples: 
      | data      |
      | testdata1 |
      | testdata2 |
      | testdata3 |

  @TC_0006
  Scenario Outline: TC_0006_Add KYC Document Invalid client_secret  Header
    Given User Loads data for Test Case "TC_0006" and test data "<data>"
    When user changes the "client_secret" header
    And User sends a "put" Request
    Then Status code and Line of Response should match "Status Code" and "Status Line"

    Examples: 
      | data      |
      | testdata1 |
      | testdata2 |
      | testdata3 |

  @TC_0007
  Scenario Outline: TC_0007_Add KYC Document Invalid XCorrelation ID Header
    Given User Loads data for Test Case "TC_0007" and test data "<data>"
    When user changes the "X-Correlation-ID" header
    And User sends a "put" Request
    Then Status code and Line of Response should match "Status Code" and "Status Line"

    Examples: 
      | data      |
      | testdata1 |
      | testdata2 |
      | testdata3 |

  @TC_0008
  Scenario Outline: TC_0008_Add KYC Document Invalid Session ID Header
    Given User Loads data for Test Case "TC_0008" and test data "<data>"
    When user changes the "sessionId" header
    And User sends a "put" Request
    Then Status code and Line of Response should match "Status Code" and "Status Line"

    Examples: 
      | data      |
      | testdata1 |
      | testdata2 |
      | testdata3 |

  @TC_0009
  Scenario Outline: TC_0009_Add KYC Document Invalid customerId in Request Body
    Given User Loads data for Test Case "TC_0009" and test data "<data>"
    When User changes updates the "$.customerId" value in the Request Body
    And User sends a "put" Request
    Then Status code and Line of Response should match "Status Code" and "Status Line"

    Examples: 
      | data      |
      | testdata1 |
      | testdata2 |
      | testdata3 |

  @TC_0010
  Scenario Outline: TC_0010_Add KYC Document Invalid type in Request Body
    Given User Loads data for Test Case "TC_0010" and test data "<data>"
    When User changes updates the "$.type" value in the Request Body
    And User sends a "put" Request
    Then Status code and Line of Response should match "Status Code" and "Status Line"

    Examples: 
      | data      |
      | testdata1 |
      | testdata2 |
      | testdata3 |

  @TC_0011
  Scenario Outline: TC_0011_Add KYC Document Invalid number in Request Body
    Given User Loads data for Test Case "TC_0011" and test data "<data>"
    When User changes updates the "$.number" value in the Request Body
    And User sends a "put" Request
    Then Status code and Line of Response should match "Status Code" and "Status Line"

    Examples: 
      | data      |
      | testdata1 |
      | testdata2 |
      | testdata3 |

  @TC_0012
  Scenario Outline: TC_0012_Add KYC Document Invalid issue_place in Request Body
    Given User Loads data for Test Case "TC_0012" and test data "<data>"
    When User changes updates the "$.issue_place" value in the Request Body
    And User sends a "put" Request
    Then Status code and Line of Response should match "Status Code" and "Status Line"

    Examples: 
      | data      |
      | testdata1 |
      | testdata2 |
      | testdata3 |

  @TC_0013
  Scenario Outline: TC_0013_Add KYC Document Invalid is_primary in Request Body
    Given User Loads data for Test Case "TC_0013" and test data "<data>"
    When User changes updates the "$.is_primary" value in the Request Body
    And User sends a "put" Request
    Then Status code and Line of Response should match "Status Code" and "Status Line"

    Examples: 
      | data      |
      | testdata1 |
      | testdata2 |
      | testdata3 |

  @TC_0014
  Scenario Outline: TC_0014_Add KYC Document Invalid expiry_date in Request Body
    Given User Loads data for Test Case "TC_0014" and test data "<data>"
    When User changes updates the "$.expiry_date" value in the Request Body
    And User sends a "put" Request
    Then Status code and Line of Response should match "Status Code" and "Status Line"

    Examples: 
      | data      |
      | testdata1 |
      | testdata2 |
      | testdata3 |

  @TC_0015
  Scenario Outline: TC_0015_Add KYC Document Invalid issue_date in Request Body
    Given User Loads data for Test Case "TC_0015" and test data "<data>"
    When User changes updates the "$.issue_date" value in the Request Body
    And User sends a "put" Request
    Then Status code and Line of Response should match "Status Code" and "Status Line"

    Examples: 
      | data      |
      | testdata1 |
      | testdata2 |
      | testdata3 |
********************************************
{
	"TC_0001": {
		"testdata1": {
			"Status Code": "201",
			"Status Line": "201 Created"
		}
	},
	"TC_0002": {
		"testdata1": {
			"value": "",
			"Status Code": "400",
			"Status Line": "400 Bad Request"
		},
		"testdata2": {
			"value": "1234567891",
			"Status Code": "400",
			"Status Line": "400 Bad Request"
		},
		"testdata3": {
			"value": "1234as@#!!",
			"Status Code": "400",
			"Status Line": "400 Bad Request"
		}
	},
	"TC_0003": {
		"testdata1": {
			"value": "",
			"Status Code": "400",
			"Status Line": "400 Bad Request"
		},
		"testdata2": {
			"value": "1234567891",
			"Status Code": "400",
			"Status Line": "400 Bad Request"
		},
		"testdata3": {
			"value": "1234as@#!!",
			"Status Code": "400",
			"Status Line": "400 Bad Request"
		}
	},
	"TC_0004": {
		"testdata1": {
			"value": "",
			"Status Code": "400",
			"Status Line": "400 Bad Request"
		},
		"testdata2": {
			"value": "1234567891",
			"Status Code": "400",
			"Status Line": "400 Bad Request"
		},
		"testdata3": {
			"value": "1234as@#!!",
			"Status Code": "400",
			"Status Line": "400 Bad Request"
		}
	},
	"TC_0005": {
		"testdata1": {
			"value": "",
			"Status Code": "401",
			"Status Line": "401 Unauthorized"
		},
		"testdata2": {
			"value": "12345",
			"Status Code": "401",
			"Status Line": "401 Unauthorized"
		},
		"testdata3": {
			"value": "a4ca9e72-7271-11ea-bc55-0242ac130003s",
			"Status Code": "401",
			"Status Line": "401 Unauthorized"
		}
	},
	"TC_0006": {
		"testdata1": {
			"value": "",
			"Status Code": "401",
			"Status Line": "401 Unauthorized"
		},
		"testdata2": {
			"value": "12345",
			"Status Code": "401",
			"Status Line": "401 Unauthorized"
		},
		"testdata3": {
			"value": "a4ca9e72-7271-11ea-bc55-0242ac130003s",
			"Status Code": "401",
			"Status Line": "401 Unauthorized"
		}
	},
	"TC_0007": {
		"testdata1": {
			"value": "",
			"Status Code": "401",
			"Status Line": "401 Unauthorized"
		},
		"testdata2": {
			"value": "12345",
			"Status Code": "401",
			"Status Line": "401 Unauthorized"
		},
		"testdata3": {
			"value": "a4ca9e72-7271-11ea-bc55-0242ac130003s",
			"Status Code": "401",
			"Status Line": "401 Unauthorized"
		}
	},
	"TC_0008": {
		"testdata1": {
			"value": "",
			"Status Code": "201",
			"Status Line": "201 Created"
		},
		"testdata2": {
			"value": "12345",
			"Status Code": "401",
			"Status Line": "401 Unauthorized"
		},
		"testdata3": {
			"value": "a4ca9e72-7271-11ea-bc55-0242ac130003s",
			"Status Code": "401",
			"Status Line": "401 Unauthorized"
		}
	},
	"TC_0009": {
		"testdata1": {
			"value": "",
			"Status Code": "400",
			"Status Line": "400 Bad Request"
		},
		"testdata2": {
			"value": "1234567891",
			"Status Code": "400",
			"Status Line": "400 Bad Request"
		},
		"testdata3": {
			"value": "123456789@#$%^&*(&*(",
			"Status Code": "400",
			"Status Line": "400 Bad Request"
		}
	},
	"TC_0010": {
		"testdata1": {
			"value": "",
			"Status Code": "400",
			"Status Line": "400 Bad Request"
		},
		"testdata2": {
			"value": "1234567891",
			"Status Code": "400",
			"Status Line": "400 Bad Request"
		},
		"testdata3": {
			"value": "123456789@#$%^&*(&*(",
			"Status Code": "400",
			"Status Line": "400 Bad Request"
		}
	},
	"TC_0011": {
		"testdata1": {
			"value": "",
			"Status Code": "400",
			"Status Line": "400 Bad Request"
		},
		"testdata2": {
			"value": "123456789112345678911234567891123",
			"Status Code": "400",
			"Status Line": "400 Bad Request"
		},
		"testdata3": {
			"value": "123456789@#$%^&*(&*(",
			"Status Code": "400",
			"Status Line": "400 Bad Request"
		}
	},
	"TC_0012": {
		"testdata1": {
			"value": "",
			"Status Code": "400",
			"Status Line": "400 Bad Request"
		},
		"testdata2": {
			"value": "123456789112345678911234567891123123456789112345678911234567891123123456789112345678911234567891123123456789112345678911234567891",
			"Status Code": "400",
			"Status Line": "400 Bad Request"
		},
		"testdata3": {
			"value": "123456789@#$%^&*(&*(",
			"Status Code": "400",
			"Status Line": "400 Bad Request"
		}
	},
	"TC_0013": {
		"testdata1": {
			"value": "",
			"Status Code": "400",
			"Status Line": "400 Bad Request"
		},
		"testdata2": {
			"value": "123",
			"Status Code": "400",
			"Status Line": "400 Bad Request"
		},
		"testdata3": {
			"value": "1*(",
			"Status Code": "400",
			"Status Line": "400 Bad Request"
		}
	},
	"TC_0014": {
		"testdata1": {
			"value": "",
			"Status Code": "400",
			"Status Line": "400 Bad Request"
		},
		"testdata2": {
			"value": "30-09-2021",
			"Status Code": "400",
			"Status Line": "400 Bad Request"
		},
		"testdata3": {
			"value": "1*(",
			"Status Code": "400",
			"Status Line": "400 Bad Request"
		}
	},
	"TC_0015": {
		"testdata1": {
			"value": "",
			"Status Code": "400",
			"Status Line": "400 Bad Request"
		},
		"testdata2": {
			"value": "30-09-2021",
			"Status Code": "400",
			"Status Line": "400 Bad Request"
		},
		"testdata3": {
			"value": "1*(",
			"Status Code": "400",
			"Status Line": "400 Bad Request"
		}
	}
}
*************************************